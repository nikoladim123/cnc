<svg version="1.1" width="100%" height="100%"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="-400 -400 800 800">

    <defs>

    </defs>
<line x1="-400" x2="400" stroke="blue" />
<line y1="-400" y2="400" stroke="yellow" />


<g id="bed" transform="translate(50,0) rotate(45)">
    <circle r="300" stroke="black" fill="none"/>
    <line x1="-400" x2="400" stroke="red" />
    <line y1="-400" y2="400" stroke="green" />
        <rect x="-200" y="-200" width="400" height="400" stroke="green" fill="none" />

</g>
<line x1="0" y1="0" x2="0" y2="300"  stroke="purple" />
<g opacity="0.1" transform="translate(0,-300) rotate(0)">
    <circle cy="0" r="300" stroke="black" fill="none"/>
    <line x1="0" y1="0" x2="0" y2="300"  stroke="purple" />
</g>

<script type="text/ecmascript">

   const draw = (dx,alpha)=>{
        //console.log({dx,alpha});
      const bed = document.querySelector("#bed")
      const tr = `translate(${dx},0) rotate(${alpha})`
     // console.log(tr)
      bed.setAttribute("transform",tr)
   }

    function dot(a, b) {
        return a.map(function (v, i) {
            return v * this[i];
        }, b).reduce((va, vb) => va + vb);
    }

    function len(a){
       return Math.sqrt(dot(a, a)) || 1;
    }

    /**
     * Normalize Vector
     * @param {[x,y]} a 
     */
    function nrm(a) {
        const w = Math.sqrt(dot(a, a)) || 1;
        return a.map((v, i, arr) => v / w);
    }

        /**
     * 
     * @param {V3F} a 
     * @param {V3F} b
     *
     * @returns {V3F} 
     */
    function ang(a, b) {
        return Math.acos(dot(a, b) / Math.sqrt(dot(a, a) * dot(b, b)));
    }

    function r2d(radians){return radians*(180/Math.PI)};

    const polyLine = 
    [
        [
            [-200,-200],
            [-200,200]
        ],[
            [-200,200],
            [200,200]
        ]
    ]
    const step = 1;
    const steps = polyLine
        .map(([from,to])=>[to[0]-from[0],to[1]-from[1]])
        .map((stroke)=>[nrm(stroke),len(stroke)])
        .map(([dir,len])=>[ang([1,0],dir),dir,len]);

    console.log(steps)

    var x = 200;
    var y = -200;
    var mv = 1
    const stepper = setInterval(function(){
        if( y > 200 ){
            mv*= -1;
        }

        if(-200 > y)
            clearInterval(stepper);

   
        y += mv;

        const dir = nrm([x,y])

        const alphar = ang(dir,[0,1])
        const alpha = r2d(alphar);


        console.log({dir,alpha, alphar})
       
        console.log(x)
        const dx = - Math.sin(alphar) * x - Math.cos(alphar) * y;
        draw(dx,alpha)
        
    },50)
    

    
    
</script>
</svg>